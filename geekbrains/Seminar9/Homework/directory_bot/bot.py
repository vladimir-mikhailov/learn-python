from typing import Union, List
from functools import wraps
import os
import logging

from telegram import Update, constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import filters, ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler

import directory as dir

if __name__ == '__main__':
    TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# Decorators:

def command_handler(command):
    def decorator(func):
        handler = CommandHandler(command, func)
        app.add_handler(handler)
        return func
    return decorator


def send_action(action):
    """Sends `action` while processing func command."""

    def decorator(func):
        @wraps(func)
        async def command_func(update, context, *args, **kwargs):
            await context.bot.send_chat_action(chat_id=update.effective_message.chat_id, action=action)
            return await func(update, context,  *args, **kwargs)
        return command_func

    return decorator


send_typing_action = send_action(constants.ChatAction.TYPING)


# Menu

def build_menu(
    buttons: List[InlineKeyboardButton],
    n_cols: int,
    header_buttons: Union[InlineKeyboardButton,
                          List[InlineKeyboardButton]] = None,
    footer_buttons: Union[InlineKeyboardButton,
                          List[InlineKeyboardButton]] = None
) -> List[List[InlineKeyboardButton]]:
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons if isinstance(
            header_buttons, list) else [header_buttons])
    if footer_buttons:
        menu.append(footer_buttons if isinstance(
            footer_buttons, list) else [footer_buttons])
    return menu


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    await query.answer()

    if query.data == '—Åancel':
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.effective_message.id)

    elif query.data == 'add_real_friend':
        pass

    elif query.data == 'add_fix_friend':
        try:
            how_much = int(''.join(context.args))
        except Exception:
            how_much = 1
        new_ids = dir.add_fixtures(how_much)
        new_users = []
        for id in new_ids:
            new_user = dir.get_user(id)
            new_users.append(new_user)
            answer_text = ' –£ —Ç–µ–±—è ' + ('–Ω–æ–≤–∞—è –ø–æ–¥—Ä—É–≥–∞' if new_user.get('sex') == 'F' else '–Ω–æ–≤—ã–π –¥—Ä—É–≥') + ' ' + \
                new_user.get('first_name') + ' ' + \
                new_user.get('last_name') + ' '
            answer_text += ('üíÉ' if new_user.get('sex') == 'F' else 'üï∫')

            await context.bot.send_message(chat_id=update.effective_chat.id, text=answer_text)

    else:
        await query.edit_message_text(text=f"{query.data}")


# Commands:

@send_typing_action
@command_handler(['start', 'restart', 'remember'])
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    hello_text = "–ü—Ä–∏–≤–µ—Ç, " + str(update.effective_user.first_name) + '! '

    tg_id = update.effective_user.id
    user_data = {
        'first_name': update.effective_user.first_name,
        'last_name': update.effective_user.last_name,
        'tg_id': tg_id,
    }

    id = dir.find_user_by_tg_id(tg_id)
    if not id:
        dir.add_user(user_data)
        hello_text += '–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª üßê'
    else:
        dir.update_user(id, user_data)
        hello_text += '–Ø —Ç–µ–±—è –ø–æ–º–Ω—é ü§ó'

    await context.bot.send_message(chat_id=update.effective_chat.id, text=hello_text)

    await help(update, context)


@send_typing_action
@command_handler('help')
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = '''–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é:

    /help - –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é
    /restart - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

    <b>–¢—ã –∏ —è:</b>
    /remember - –Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω—é
    /forget - –Ø —Ç–µ–±—è –∑–∞–±—É–¥—É

    <b>–î—Ä—É–∑—å—è:</b>
    /add_friend - –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
    /edit_friend - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞
    /friends - –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π
    /delete_friends - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
    '''
    await update.message.reply_text(text=answer, parse_mode=constants.ParseMode.HTML)


@send_typing_action
@command_handler('forget')
async def forget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    id = dir.find_user_by_tg_id(tg_id)
    if not id:
        answer_text = '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é üôÑ'
    else:
        dir.delete_user(id)
        answer_text = '–Ø —Ç–µ–±—è –∑–∞–±—ã–ª üôÑ'

    await context.bot.send_message(chat_id=update.effective_chat.id, text=answer_text)
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π? üßê')


@send_typing_action
@command_handler('add_friend')
async def add_friend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header_buttons = [
    ]
    main_buttons = [
        InlineKeyboardButton("–í—ã–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ", callback_data="add_fix_friend"),
        InlineKeyboardButton("–ù–∞—Å—Ç–æ—è—â–µ–≥–æ", callback_data="add_real_friend"),
    ]
    footer_buttons = [
        InlineKeyboardButton("–ù–∏–∫–∞–∫–æ–≥–æ", callback_data="—Åancel"),
    ]
    reply_markup = InlineKeyboardMarkup(
        build_menu(main_buttons, n_cols=2, header_buttons=header_buttons, footer_buttons=footer_buttons))
    await update.message.reply_text("–ö–∞–∫–æ–≥–æ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=reply_markup)

    # new_user = {}
    # answer_text = ''
    # if not context.args:
    #     answer_text = ('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n'
    #                    '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç:\n'
    #                    '/add_friend –ò–≤–∞–Ω –ö–æ–∑—è–≤–∫–∏–Ω +79991234567')
    # else:
    #     args_quantity = len(context.args)
    #     if args_quantity > 0:
    #         new_user['first_name'] = context.args[0]
    #         answer_text += new_user['first_name'] + ' '
    #     if args_quantity > 1:
    #         new_user['last_name'] = context.args[1]
    #         answer_text += new_user['last_name'] + ' '
    #     if args_quantity > 2:
    #         new_user['phone'] = context.args[2]

    #     new_id = dir.add_user(new_user)
    #     if added_user := dir.get_user(new_id):
    #         answer_text += '—Ç–µ–ø–µ—Ä—å –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π üéâ'
    #     else:
    #         answer_text += '—Ç–∞–∫ –∏ –Ω–µ —Å—Ç–∞–ª —Ç–≤–æ–∏–º –¥—Ä—É–≥–æ–º ü§∑‚Äç‚ôÇÔ∏è'
    # await update.message.reply_text(text=answer_text)


@send_typing_action
@command_handler('edit_friend')
async def edit_friend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    header_buttons = [
        InlineKeyboardButton("Header Button", callback_data="Header Button"),
    ]
    main_buttons = [
        InlineKeyboardButton("Option 1", callback_data="1"),
        InlineKeyboardButton("Option 2", callback_data="2"),
        InlineKeyboardButton("Option 3", callback_data="3"),
        InlineKeyboardButton("Option 4", callback_data="4"),
    ]
    footer_buttons = [
        InlineKeyboardButton("Footer Button", callback_data="Footer Button"),
    ]
    reply_markup = InlineKeyboardMarkup(
        build_menu(main_buttons, n_cols=2, header_buttons=header_buttons, footer_buttons=footer_buttons))
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


@send_typing_action
@command_handler('friends')
async def friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    if friends := [user for user in dir.get_users() if user.get('tg_id') != tg_id]:
        answer = f'–£ —Ç–µ–±—è {len(friends)} –¥—Ä—É–∑–µ–π:\n\n'
        for friend in friends:
            answer += ('üíÉ ' if friend.get('sex') == 'F' else 'üï∫ ')
            if name := friend.get('first_name'):
                answer += name
            if last_name := friend.get('last_name'):
                answer += ' ' + last_name
            answer += '\n\n'
    else:
        answer = '–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ù–æ –µ—Å—Ç—å —è üòâ'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)


@send_typing_action
@command_handler('delete_friends')
async def delete_friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    if friends := [user for user in dir.get_users() if user.get('tg_id') != tg_id]:
        answer = f'–£ —Ç–µ–±—è –±—ã–ª–æ {len(friends)} –¥—Ä—É–∑–µ–π:\n\n'
        for friend in friends:
            if dir.delete_user(friend.get('id')):
                if name := friend.get('first_name'):
                    answer += name
                if last_name := friend.get('last_name'):
                    answer += ' ' + last_name
                answer += ' –±–æ–ª—å—à–µ –Ω–µ ' + \
                    ('–¥—Ä—É–≥' if friend['sex'] ==
                     'M' else '–ø–æ–¥—Ä—É–≥–∞') + ' —Ç–µ–±–µ üòë\n'
        answer += '\n–ê —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –∑–∞–≤–æ–¥–∏ –Ω–æ–≤—ã—Ö ü´Ç'
    else:
        answer = '–î–∞ –Ω–µ –ø–∞—Ä—å—è, —É —Ç–µ–±—è –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ù–æ –µ—Å—Ç—å —è üòâ'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=answer)


@send_typing_action
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É.")

if __name__ == '__main__':
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.run_polling()


# Commands for BotFather:
# help - –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é
# remember - –Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω—é
# forget - –Ø —Ç–µ–±—è –∑–∞–±—É–¥—É
# add_friend - –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
# edit_friend - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∞
# friends - –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑–µ–π
# delete_friends - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
# restart - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
